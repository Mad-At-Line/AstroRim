import numpy as np
import matplotlib.pyplot as plt
from lenstronomy.LensModel.lens_model import LensModel
from lenstronomy.LightModel.light_model import LightModel
from scipy.interpolate import griddata
import os

def generate_complex_simulation(image_size=64):
    """
    Generates a realistic gravitational lensing simulation with multiple lens components and between 1 to 3 extended sources.
    
    The simulation uses:
      - Two lens mass models: a central SIE and an offset NFW.
      - Between one and three extended Sersic elliptical source components.
      
    The resulting images are 64x64 pixels, noise-free, and represent the raw mapping of source to lensed images.
    
    Returns:
        gt (np.ndarray): The ground truth (unlensed) source image.
        lensed (np.ndarray): The lensed image generated via ray-shooting.
    """
    # 1. Define lens and source models.
    lens_types = ['SIE', 'NFW']
    lens_model = LensModel(lens_types)
    
    # Use between 1 and 3 source objects
    num_sources = np.random.randint(1, 4)
    source_list = ['SERSIC_ELLIPSE'] * num_sources
    source_model = LightModel(source_list)
    
    # 2. Create a coordinate grid.
    grid_lin = np.linspace(-1, 1, image_size)
    x_grid, y_grid = np.meshgrid(grid_lin, grid_lin)
    
    # 3. Set lens parameters.
    kwargs_lens = []
    # Main lens: SIE at the center.
    kwargs_lens.append({
        'theta_E': np.random.uniform(0.9, 1.2),
        'e1': np.random.uniform(-0.2, 0.2),
        'e2': np.random.uniform(-0.2, 0.2),
        'center_x': 0.0,
        'center_y': 0.0
    })
    # Secondary lens: NFW offset to simulate substructure.
    kwargs_lens.append({
        'Rs': np.random.uniform(0.1, 0.2),
        'alpha_Rs': np.random.uniform(0.1, 0.3),
        'center_x': np.random.uniform(0.3, 0.5),
        'center_y': np.random.uniform(0.3, 0.5)
    })
    
    # 4. Set source parameters for each extended source.
    kwargs_sources = []
    for _ in range(num_sources):
        kwargs_source = {
            'amp': np.random.uniform(5, 10),
            'R_sersic': np.random.uniform(0.25, 0.4),
            'n_sersic': np.random.uniform(1.0, 2.5),
            'e1': np.random.uniform(-0.3, 0.3),
            'e2': np.random.uniform(-0.3, 0.3),
            'center_x': np.random.uniform(-0.5, 0.5),
            'center_y': np.random.uniform(-0.5, 0.5)
        }
        kwargs_sources.append(kwargs_source)
    
    # 5. Generate the ground truth (unlensed) source image.
    gt = source_model.surface_brightness(x_grid, y_grid, kwargs_sources).astype(np.float32)
    
    # 6. Apply gravitational lensing via ray-shooting.
    x_src, y_src = lens_model.ray_shooting(x_grid.flatten(), y_grid.flatten(), kwargs_lens)
    gt_interp = griddata(
        points=(x_grid.flatten(), y_grid.flatten()),
        values=gt.flatten(),
        xi=(x_src.reshape(image_size, image_size), y_src.reshape(image_size, image_size)),
        method='linear',
        fill_value=0.0
    )
    lensed = np.nan_to_num(gt_interp)
    
    return gt, lensed

if __name__ == '__main__':
    output_dir = r'C:\Users\mythi\.astropy\Code\Hopes_and_dreams\lv4_dataset_20k'
    os.makedirs(output_dir, exist_ok=True)
    
    num_simulations = 20000   # Adjust as needed
    
    # Generate and save the simulations (NPZ files only)
    for i in range(num_simulations):
        gt, lensed = generate_complex_simulation(image_size=64)
        filename = f'simulation_{i:04d}.npz'
        np.savez(os.path.join(output_dir, filename), gt=gt, lensed=lensed)
        print(f"Simulation {i+1} of {num_simulations} completed.")